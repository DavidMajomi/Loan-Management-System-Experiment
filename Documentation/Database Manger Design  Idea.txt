Main idea:
    ############################## Database Manager ##############################    
    A simple database manager that helps perform all database tasks relating to the
loan management system by being a wrapper to the database abstraction.

Sample database Manager functions incude:

getUserdata(int userLoanID); return vector (userData, bool successful or not)

getUserdata(string userName); return vector (userData, bool successful or not)

changeDateToNextInstallment(loanId, decrementBy); return vector (bool successful or not)

addNewReportRow(string rowName, string dataType e.g REAL,bool primary key or not); return vector (bool successful or not)

moveLoanToDefaultDb(int loanId); return vector (bool successful or not)

moveLoanToCompletedDb(int loanId); return vector (bool successful or not)

moveLoanToDbWithAllInformation(loanId); return vector (bool successful or not)
    This holds all information regarding all data and is updated when any database is updated. each new user is entered into this db
    immediately after data is entered into the mainn database.

    Why:
        This database exists to try to create a more natural dataset that can help with the learning experience of data sorting and cleaning.

        Arguments For and Against:
            Against: If this is the only reason why not just keep that information in the main db then shuffle the outputs to have the same effect.

################################################ DATABASES ################################################

Tables that will be managed:
1.) Main table with initial appiclation:
    Contains the following:
    1.) User name
    2.) User loan id
    3.) User time of appiclation
    4.) User Credit Scores
    5.) Monthly Income
    6.) User Financial Reserves
    7.) Debt to income ratio
    8.) Loan Duration (months)
    9.) Duration to next installment (days)                                             // Initialised to 31 days regardless of month by initial application processing, modified by end of day processing
    10.) Requested Loan Amount
    11.) Monthly Interest rate
    12.) yearly Interest rate
    13.) Loss Given default
    14.) recovery rate
    15.) outstanding monthly payments from loan
    16.) outstanding monthly payments prior to loan
    17.) Amount to be payed at next installment including Interest
    19.) Default risk score
    20.) Loan viability Score
    21.) Adjusted loan viability score
    22.) matrix based adjusted loan viability score
    23.) interest rate by group
    24.) best possible yearly interest rate
    25.) Worst possible yearly interest rate
    26.) final loan grade                                                               // Done by End of day processing
    27.) Potential profit from loan
    28.) calculated best possible loan viability score
    29.) Calculated Worst possible loan viability score
    30.) Amount of current loan + inteests left
    31.) Loan decision                                                                  // Done by end of day processing
    32.) Loan Status such as good standing, rejected, default / passed due              // Done by end of day processing
    33.) Applied today or not                                                           // Done by initial application processing and modified by end of day processing
        1.) This column contains a boolean represented as a 1 or 0 integer value.
        2.) This data is used by the end of day processing side to further determine calculations.
    34.) Account number         // Use will be decide later depending on the implementation of banking simulator
        1.) Could maybe function as a method for bank transaction monitoring


2.) Reports Table
    1.) Time of report
    2.) For all values such as credit score, monthly income etc store the following:
        1.) Mode
        2.) standard deviation
        3.) Mean
    3.) Highest loanId with related user data such as credit score
    4.) Lowest loanId with related user data


3.) Rejected Table
    1.) Contains all columns as main, but contains only values of rejected users


4.) Defaulted_loans Table
    1.) Contains all columns from main, but with those that default on their payments.


5.) Completed_loans Table
    1.) Contains all the columns of main but user data for completed / successful loans
    

    ############################## Database Abstraction ##############################
    A simple Database Abstraction that works as simple function calls to obfuscate the sqlite statements.
    Could potentially be a class with related methods allowing for more tweaking of features.
Idea:
Exception handling is done by throwing the necessary exceptions, calling functions will be responsible for catching them.
1.) Data retreival for table data requires
    A.) The select statement as a const char *
    B.) Database path const char *
    C.) Could return vector of tuples or 2 dimensional vector, why not both.
    D.) Built - in exception handling.
    E.) Database mutexes and others must be handled by calling function.
2.) Data insertion requires:
    A.) const char * of all data to insert. Could have a string alternative using polymorphism
    B.) bool insert with transaction or not.
    C.) const char * database isnert format (the header)
    D.) Database path const char *
